In file included from specific/container/array/array_class/array_1d.hpp:80,
                 from specific/container/array/array.hpp:5,
                 from specific/container/interface.hpp:264,
                 from main.cpp:6:
specific/container/array/array_class/array_1d.ipp:99:11: error: no declaration matches 'constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:333&&)'
   99 | constexpr array<type,1,device>::array ( std::from_range_t, std::ranges::input_range auto&& r )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:43:53: note: candidates are: 'template<class type, class device> template<class type2> constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type2, 1, device>&) requires (constructible_from<type, type2>) && !(convertible_to<type2, type>)'
   43 |         template < class type2 > constexpr explicit array ( const array<type2,1,device>& ) requires std::constructible_from<type,type2> but ( not std::convertible_to<type2,type> );
      |                                                     ^~~~~
specific/container/array/array_class/array_1d.hpp:42:53: note:                 'template<class type, class device> template<class type2> constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type2, 1, device>&) requires (convertible_to<type2, type>) && !(same_as<type, type2>)'
   42 |         template < class type2 > constexpr          array ( const array<type2,1,device>& ) requires std::convertible_to<type2,type>     but ( not std::same_as<type,type2>        );
      |                                                     ^~~~~
specific/container/array/array_class/array_1d.hpp:39:28: note:                 'template<class type, class device> template<class auto:328>  requires  input_range<auto:328> constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:328&&, int) requires  convertible_to<typename std::__detail::__iter_traits_impl<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::__iter_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::value_type, type>'
   39 |         constexpr          array ( std::from_range_t, std::ranges::input_range auto&& r, int )       requires std::convertible_to<std::ranges::range_value_t<decltype(r)>,type>;
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:38:28: note:                 'template<class type, class device> template<class auto:327>  requires  input_range<auto:327> constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:327&&) requires  convertible_to<typename std::__detail::__iter_traits_impl<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::__iter_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::value_type, type>'
   38 |         constexpr          array ( std::from_range_t, std::ranges::input_range auto&& r )            requires std::convertible_to<std::ranges::range_value_t<decltype(r)>,type>;
      |                            ^~~~~
specific/container/array/array_class/array_1d.ipp:91:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const ap::range<type>&) requires  copyable<type>'
   91 | constexpr array<type,1,device>::array ( const range<type>& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:68:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const std::initializer_list<_Tp>&) requires  copyable<type>'
   68 | constexpr array<type,1,device>::array ( const std::initializer_list<type>& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:35:28: note:                 'template<class type, class device> template<class auto:326>  requires  function_type<auto:326, type(int)> constexpr ap::experimental::array<type, 1, device>::array(int, auto:332)'
   35 |         constexpr          array ( int,  function_type<type(int)> auto );
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:34:28: note:                 'template<class type, class device> template<class auto:325>  requires  function_type<auto:325, type()> constexpr ap::experimental::array<type, 1, device>::array(int, auto:331)'
   34 |         constexpr          array ( int,  function_type<type()   > auto );
      |                            ^~~~~
specific/container/array/array_class/array_1d.ipp:57:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(int, const type&) requires  copyable<type>'
   57 | constexpr array<type,1,device>::array ( int init_size, const type& init_value )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:47:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(int)'
   47 | constexpr array<type,1,device>::array ( int init_size )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:13:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(ap::experimental::array<type, 1, device>&&)'
   13 | constexpr array<type,1,device>::array ( array&& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:4:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type, 1, device>&) requires  copyable<type>'
    4 | constexpr array<type,1,device>::array ( const array& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:25:28: note:                 'constexpr ap::experimental::array<type, 1, device>::array()'
   25 |         constexpr          array ( ) = default;
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:4:7: note: 'class ap::experimental::array<type, 1, device>' defined here
    4 | class array<type,1,device>
      |       ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:121:11: error: no declaration matches 'constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:334&&, int)'
  121 | constexpr array<type,1,device>::array ( std::from_range_t, std::ranges::input_range auto&& r, int init_size )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:43:53: note: candidates are: 'template<class type, class device> template<class type2> constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type2, 1, device>&) requires (constructible_from<type, type2>) && !(convertible_to<type2, type>)'
   43 |         template < class type2 > constexpr explicit array ( const array<type2,1,device>& ) requires std::constructible_from<type,type2> but ( not std::convertible_to<type2,type> );
      |                                                     ^~~~~
specific/container/array/array_class/array_1d.hpp:42:53: note:                 'template<class type, class device> template<class type2> constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type2, 1, device>&) requires (convertible_to<type2, type>) && !(same_as<type, type2>)'
   42 |         template < class type2 > constexpr          array ( const array<type2,1,device>& ) requires std::convertible_to<type2,type>     but ( not std::same_as<type,type2>        );
      |                                                     ^~~~~
specific/container/array/array_class/array_1d.hpp:39:28: note:                 'template<class type, class device> template<class auto:328>  requires  input_range<auto:328> constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:328&&, int) requires  convertible_to<typename std::__detail::__iter_traits_impl<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::__iter_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::value_type, type>'
   39 |         constexpr          array ( std::from_range_t, std::ranges::input_range auto&& r, int )       requires std::convertible_to<std::ranges::range_value_t<decltype(r)>,type>;
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:38:28: note:                 'template<class type, class device> template<class auto:327>  requires  input_range<auto:327> constexpr ap::experimental::array<type, 1, device>::array(std::from_range_t, auto:327&&) requires  convertible_to<typename std::__detail::__iter_traits_impl<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::__iter_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type, std::indirectly_readable_traits<typename std::remove_cvref<decltype(std::ranges::__access::__begin((declval<decltype(ap::experimental::array<type, 1, device>::__ct ::r)&>)()))>::type> >::value_type, type>'
   38 |         constexpr          array ( std::from_range_t, std::ranges::input_range auto&& r )            requires std::convertible_to<std::ranges::range_value_t<decltype(r)>,type>;
      |                            ^~~~~
specific/container/array/array_class/array_1d.ipp:91:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const ap::range<type>&) requires  copyable<type>'
   91 | constexpr array<type,1,device>::array ( const range<type>& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:68:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const std::initializer_list<_Tp>&) requires  copyable<type>'
   68 | constexpr array<type,1,device>::array ( const std::initializer_list<type>& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:35:28: note:                 'template<class type, class device> template<class auto:326>  requires  function_type<auto:326, type(int)> constexpr ap::experimental::array<type, 1, device>::array(int, auto:332)'
   35 |         constexpr          array ( int,  function_type<type(int)> auto );
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:34:28: note:                 'template<class type, class device> template<class auto:325>  requires  function_type<auto:325, type()> constexpr ap::experimental::array<type, 1, device>::array(int, auto:331)'
   34 |         constexpr          array ( int,  function_type<type()   > auto );
      |                            ^~~~~
specific/container/array/array_class/array_1d.ipp:57:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(int, const type&) requires  copyable<type>'
   57 | constexpr array<type,1,device>::array ( int init_size, const type& init_value )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:47:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(int)'
   47 | constexpr array<type,1,device>::array ( int init_size )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:13:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(ap::experimental::array<type, 1, device>&&)'
   13 | constexpr array<type,1,device>::array ( array&& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.ipp:4:11: note:                 'constexpr ap::experimental::array<type, 1, device>::array(const ap::experimental::array<type, 1, device>&) requires  copyable<type>'
    4 | constexpr array<type,1,device>::array ( const array& init )
      |           ^~~~~~~~~~~~~~~~~~~~
specific/container/array/array_class/array_1d.hpp:25:28: note:                 'constexpr ap::experimental::array<type, 1, device>::array()'
   25 |         constexpr          array ( ) = default;
      |                            ^~~~~
specific/container/array/array_class/array_1d.hpp:4:7: note: 'class ap::experimental::array<type, 1, device>' defined here
    4 | class array<type,1,device>
      |       ^~~~~~~~~~~~~~~~~~~~
