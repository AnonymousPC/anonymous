main.cpp: In function 'int main()':
main.cpp:17:13: warning: unused variable 'i' [-Wunused-variable]
   17 |     for(int i in range(1000000))
      |             ^
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/algorithm:60,
                 from generic/basic/interface.hpp:20,
                 from main.cpp:1:
In static member function 'static constexpr _Up* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(_Tp*, _Tp*, _Up*) [with _Tp = const char; _Up = char; bool _IsMove = false]',
    inlined from 'constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algobase.h:521:30,
    inlined from 'constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algobase.h:548:42,
    inlined from 'constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algobase.h:555:31,
    inlined from 'constexpr _OI std::copy(_II, _II, _OI) [with _II = const char*; _OI = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algobase.h:651:7,
    inlined from 'constexpr _OutputIterator std::__copy_n(_RandomAccessIterator, _Size, _OutputIterator, random_access_iterator_tag) [with _RandomAccessIterator = const char*; _Size = int; _OutputIterator = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algo.h:683:23,
    inlined from 'constexpr _OIter std::copy_n(_IIter, _Size, _OIter) [with _IIter = const char*; _Size = int; _OIter = char*]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algo.h:715:27,
    inlined from 'constexpr ap::basic_string<char_type>::basic_string(const char_type*) [with char_type = char]' at generic/container/string/string_base/../string_class/string.ipp:90:21,
    inlined from 'constexpr ap::string ap::literals::operator""s(const char*, size_t)' at generic/container/interface.hpp:273:118,
    inlined from 'ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> [with auto:1995 = ap::basic_string<char>]' at generic/io/http/http_base/http_buf.ipp:410:76,
    inlined from 'constexpr _Res std::__invoke_impl(__invoke_other, _Fn&&, _Args&& ...) [with _Res = ap::basic_string<char>; _Fn = ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)>&; _Args = {ap::basic_string<char>&}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:61:67,
    inlined from 'constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)>&; _Args = {ap::basic_string<char>&}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:97:36,
    inlined from 'constexpr decltype(auto) std::ranges::transform_view<_Vp, _Fp>::_Iterator<_Const>::operator*() const [with bool _Const = false; _Vp = std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >; _Fp = ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:1949:58,
    inlined from 'std::ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)> [with auto:43 = const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:1495:42,
    inlined from 'constexpr _Res std::__invoke_impl(__invoke_other, _Fn&&, _Args&& ...) [with _Res = ap::basic_string<char>; _Fn = ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)>; _Args = {const ranges::transform_view<ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:61:67,
    inlined from 'constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)>; _Args = {const ranges::transform_view<ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:97:36,
    inlined from 'constexpr std::_Optional_payload_base<_Tp>::_Storage<_Up, false>::_Storage(std::_Optional_func<_Fn>, _Arg&&) [with _Fn = std::ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)>; _Arg = const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&; _Up = ap::basic_string<char>; _Tp = ap::basic_string<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/optional:253:8,
    inlined from 'constexpr decltype (::new(void*(0)) _Tp) std::construct_at(_Tp*, _Args&& ...) [with _Tp = _Optional_payload_base<ap::basic_string<char> >::_Storage<ap::basic_string<char>, false>; _Args = {_Optional_func<ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)> >&, const ranges::transform_view<ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_construct.h:97:14,
    inlined from 'constexpr void std::_Optional_payload_base<_Tp>::_M_apply(std::_Optional_func<_Fn>, _Up&&) [with _Fn = std::ranges::__detail::__non_propagating_cache<ap::basic_string<char> >::_M_emplace_deref<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false> >(const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&)::<lambda(auto:43&)>; _Up = const std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>&; _Tp = ap::basic_string<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/optional:291:21,
    inlined from 'constexpr _Tp& std::ranges::__detail::__non_propagating_cache<_Tp>::_M_emplace_deref(const _Iter&) [with _Iter = std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >::_Iterator<false>; _Tp = ap::basic_string<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:1496:31,
    inlined from 'constexpr auto& std::ranges::join_with_view<_Vp, _Pattern>::_Iterator<<anonymous> >::_M_update_inner() [with bool _Const = false; _Vp = std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >; _Pattern = std::ranges::single_view<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:7344:45,
    inlined from 'constexpr void std::ranges::join_with_view<_Vp, _Pattern>::_Iterator<<anonymous> >::_M_satisfy() [with bool _Const = false; _Vp = std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >; _Pattern = std::ranges::single_view<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:7366:40,
    inlined from 'constexpr std::ranges::join_with_view<_Vp, _Pattern>::_Iterator<<anonymous> >& std::ranges::join_with_view<_Vp, _Pattern>::_Iterator<<anonymous> >::operator++() [with bool _Const = false; _Vp = std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >; _Pattern = std::ranges::single_view<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:7448:17,
    inlined from 'constexpr ap::basic_string<char_type>::basic_string(std::from_range_t, auto:982&&) requires requires{(declval<ap::basic_string>)().push(*ap::basic_string<char_type>::__ct ::r->begin());} [with auto:977 = std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> >; char_type = char]' at generic/container/string/string_base/../string_class/string.ipp:105:9,
    inlined from 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = ap::basic_string<char>; _Rg = join_with_view<transform_view<ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, single_view<char> >; _Args = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9314:35,
    inlined from 'constexpr auto std::ranges::__detail::_To<_Cont>::operator()(_Range&&, _Args&& ...) const [with _Range = std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> >; _Args = {}; _Cont = ap::basic_string<char>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9438:38,
    inlined from 'std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >::operator()<std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> > >(this std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >&&, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(this const auto:1995&)> >, std::ranges::single_view<char> >&&)::<lambda(auto:41&& ...)> [with auto:41 = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:1033:51,
    inlined from 'constexpr _Res std::__invoke_impl(__invoke_other, _Fn&&, _Args&& ...) [with _Res = ap::basic_string<char>; _Fn = ranges::views::__adaptor::_Partial<ranges::__detail::_To<ap::basic_string<char> > >::operator()<std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> > >(this std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >&&, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(this const auto:1995&)> >, std::ranges::single_view<char> >&&)::<lambda(auto:41&& ...)>&; _Args = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:61:67,
    inlined from 'constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = ranges::views::__adaptor::_Partial<ranges::__detail::_To<ap::basic_string<char> > >::operator()<std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> > >(this std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >&&, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(this const auto:1995&)> >, std::ranges::single_view<char> >&&)::<lambda(auto:41&& ...)>&; _Args = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/invoke.h:97:36,
    inlined from 'constexpr decltype(auto) std::__apply_impl(_Fn&&, _Tuple&&, index_sequence<_Idx ...>) [with _Fn = ranges::views::__adaptor::_Partial<ranges::__detail::_To<ap::basic_string<char> > >::operator()<std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> > >(this std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >&&, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(this const auto:1995&)> >, std::ranges::single_view<char> >&&)::<lambda(auto:41&& ...)>&; _Tuple = tuple<>; long unsigned int ..._Idx = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/tuple:2922:51,
    inlined from 'constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = ranges::views::__adaptor::_Partial<ranges::__detail::_To<ap::basic_string<char> > >::operator()<std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> > >(this std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >&&, std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(this const auto:1995&)> >, std::ranges::single_view<char> >&&)::<lambda(auto:41&& ...)>&; _Tuple = tuple<>]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/tuple:2938:21,
    inlined from 'constexpr auto std::ranges::views::__adaptor::_Partial<_Adaptor, _Args>::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<ap::basic_string<char> > >; _Range = std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> >; _Adaptor = std::ranges::__detail::_To<ap::basic_string<char> >; _Args = {}]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:1035:70,
    inlined from 'constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = _Partial<std::ranges::__detail::_To<ap::basic_string<char> > >; _Range = std::ranges::join_with_view<std::ranges::transform_view<std::ranges::ref_view<ap::array<ap::basic_string<char>, 1> >, ap::aux::try_for_each<boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)> >(const boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>&, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>, ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>)::<lambda(const auto:1995&)> >, std::ranges::single_view<char> >]' at /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:956:67,
    inlined from 'void ap::aux::try_for_each(const auto:1975&, auto:1976, auto:1977) [with auto:1975 = boost::asio::ip::basic_resolver_results<boost::asio::ip::tcp>; auto:1976 = ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1998&)>; auto:1977 = ap::http_buf::connect_without_proxy(const ap::url&)::<lambda(const auto:1999&)>]' at generic/io/http/http_base/http_buf.ipp:412:20,
    inlined from 'void ap::http_buf::connect_without_proxy(const ap::url&)' at generic/io/http/http_base/http_buf.cpp:181:22:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_algobase.h:452:30: warning: 'void* __builtin_memcpy(void*, const void*, long unsigned int)' forming offset [5, 15] is out of the bounds [0, 5] [-Warray-bounds=]
  452 |             __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
      |             ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
