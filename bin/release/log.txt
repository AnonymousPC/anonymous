In file included from main.cpp:2:
generic/basic/interface.hpp:19:9: warning: "__cpp_lib_text_encoding" redefined
   19 | #define __cpp_lib_text_encoding 202412L
      |         ^~~~~~~~~~~~~~~~~~~~~~~
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/text_encoding:37,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/locale_classes.h:44,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:41,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/streambuf:43,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/streambuf_iterator.h:35,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/iterator:66,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:43,
                 from test.cpp:16,
                 from main.cpp:1:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/version.h:1990:12: note: this is the location of the previous definition
 1990 | #   define __cpp_lib_text_encoding 202306L
      |            ^~~~~~~~~~~~~~~~~~~~~~~
test.cpp: In function 'void haha()':
test.cpp:14:15: error: 'great' was not declared in this scope
   14 | #define great great
      |               ^~~~~
test.cpp:25:5: note: in expansion of macro 'great'
   25 |     great();
      |     ^~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges: In instantiation of 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9354:25: error: static assertion failed
 9354 |           static_assert(input_range<range_reference_t<_Rg>>);
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9354:25: note: constraints not satisfied
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_util.h:34,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/tuple:44,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/stl_map.h:63,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/map:63,
                 from test.cpp:15:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:499:13:   required for the satisfaction of 'range<_Tp>' [with _Tp = int&]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:499:21:   in requirements with '_Tp& __t' [with _Tp = int&]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:501:22: note: the required expression 'std::ranges::_Cpo::begin(__t)' is invalid
  501 |         ranges::begin(__t);
      |         ~~~~~~~~~~~~~^~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:502:20: note: the required expression 'std::ranges::_Cpo::end(__t)' is invalid
  502 |         ranges::end(__t);
      |         ~~~~~~~~~~~^~~~~
cc1plus: note: set '-fconcepts-diagnostics-depth=' to at least 2 for more detail
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges: In instantiation of 'std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> [with _Elt = int&]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2640:26:   required by substitution of 'template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&; _Args = {int&}]'
 2640 |       std::declval<_Fn>()(std::declval<_Args>()...)
      |       ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2651:60:   required from 'struct std::__result_of_impl<false, false, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&, int&>'
 2651 |       using type = decltype(_S_test<_Functor, _ArgTypes...>(0));
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2656:12:   required from 'struct std::__invoke_result<std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&, int&>'
 2656 |     struct __invoke_result
      |            ^~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:3159:12:   required from 'struct std::is_invocable<std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&, int&>'
 3159 |     struct is_invocable
      |            ^~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:3523:71:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:2195:5:   required by substitution of 'template<class _Range, class _Fp> std::ranges::transform_view(_Range&&, _Fp)-> transform_view<views::all_t<_Range>, _Fp> [with _Range = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >; _Fp = std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>]'
 2195 |     transform_view(_Range&&, _Fp) -> transform_view<views::all_t<_Range>, _Fp>;
      |     ^~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, const _Arg&> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >::operator()(_Range&&) const [with _Range = std::ranges::views::_Transform]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >; _Range = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >]'
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9357:43:   required from 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]'
 9357 |           return ranges::to<_Cont>(ref_view(__r) | views::transform(
      |                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
 9358 |                 []<typename _Elt>(_Elt&& __elem) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9359 |                   using _ValT = range_value_t<_Cont>;
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9361 |                 }), std::forward<_Args>(__args)...);
      |                 ~~                                
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9360:34: error: no matching function for call to 'to<_ValT>(int&)'
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                          ~~~~~~~~^~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9302:5: note: candidate: 'template<class _Cont, class _Rg, class ... _Args>  requires (input_range<_Rg>) && !(view<_Cont>) constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...)'
 9302 |     to [[nodiscard]] (_Rg&& __r, _Args&&... __args)
      |     ^~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9302:5: note:   template argument deduction/substitution failed:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9302:5: note: constraints not satisfied
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h: In substitution of 'template<class _Cont, class _Rg, class ... _Args>  requires (input_range<_Rg>) && !(view<_Cont>) constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::pair<const int, int>; _Rg = int&; _Args = {}]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9360:20:   required from 'std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> [with _Elt = int&]'
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                          ~~~~~~~~^~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2640:26:   required by substitution of 'template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&; _Args = {int&}]'
 2640 |       std::declval<_Fn>()(std::declval<_Args>()...)
      |       ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2651:60:   required from 'struct std::__result_of_impl<false, false, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&, int&>'
 2651 |       using type = decltype(_S_test<_Functor, _ArgTypes...>(0));
      |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:2656:12:   required from 'struct std::__invoke_result<std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>&, int&>'
 2656 |     struct __invoke_result
      |            ^~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/type_traits:3159:12:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:2195:5:   required by substitution of 'template<class _Range, class _Fp> std::ranges::transform_view(_Range&&, _Fp)-> transform_view<views::all_t<_Range>, _Fp> [with _Range = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >; _Fp = std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)>]'
 2195 |     transform_view(_Range&&, _Fp) -> transform_view<views::all_t<_Range>, _Fp>;
      |     ^~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, const _Arg&> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >::operator()(_Range&&) const [with _Range = std::ranges::views::_Transform]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >; _Range = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >]'
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9357:43:   required from 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]'
 9357 |           return ranges::to<_Cont>(ref_view(__r) | views::transform(
      |                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
 9358 |                 []<typename _Elt>(_Elt&& __elem) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9359 |                   using _ValT = range_value_t<_Cont>;
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9361 |                 }), std::forward<_Args>(__args)...);
      |                 ~~                                
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:499:13:   required for the satisfaction of 'range<_Tp>' [with _Tp = int&]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:588:13:   required for the satisfaction of 'input_range<_Rg>' [with _Rg = int&]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:499:21:   in requirements with '_Tp& __t' [with _Tp = int&]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:501:22: note: the required expression 'std::ranges::_Cpo::begin(__t)' is invalid
  501 |         ranges::begin(__t);
      |         ~~~~~~~~~~~~~^~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ranges_base.h:502:20: note: the required expression 'std::ranges::_Cpo::end(__t)' is invalid
  502 |         ranges::end(__t);
      |         ~~~~~~~~~~~^~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges: In instantiation of 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9357:50: error: no match for 'operator|' (operand types are 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' and 'std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >')
 9357 |           return ranges::to<_Cont>(ref_view(__r) | views::transform(
      |                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
 9358 |                 []<typename _Elt>(_Elt&& __elem) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9359 |                   using _ValT = range_value_t<_Cont>;
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9361 |                 }), std::forward<_Args>(__args)...);
      |                 ~~                                
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/regex:40,
                 from generic/basic/interface.hpp:36:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bitset:1567:5: note: candidate: 'template<long unsigned int _Nb> constexpr std::bitset<_Nb> std::operator|(const bitset<_Nb>&, const bitset<_Nb>&)'
 1567 |     operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT
      |     ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bitset:1567:5: note:   template argument deduction/substitution failed:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9357:50: note:   'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' is not derived from 'const std::bitset<_Nb>'
 9357 |           return ranges::to<_Cont>(ref_view(__r) | views::transform(
      |                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
 9358 |                 []<typename _Elt>(_Elt&& __elem) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9359 |                   using _ValT = range_value_t<_Cont>;
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9361 |                 }), std::forward<_Args>(__args)...);
      |                 ~~                                
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:955:5: note: candidate: 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&)'
  955 |     operator|(_Range&& __r, _Self&& __self)
      |     ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:955:5: note:   substitution of deduced template arguments resulted in errors seen above
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:964:5: note: candidate: 'template<class _Lhs, class _Rhs>  requires (__is_range_adaptor_closure<_Lhs>) && (__is_range_adaptor_closure<_Rhs>) constexpr auto std::ranges::views::__adaptor::operator|(_Lhs&&, _Rhs&&)'
  964 |     operator|(_Lhs&& __lhs, _Rhs&& __rhs)
      |     ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:964:5: note:   template argument deduction/substitution failed:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:964:5: note: constraints not satisfied
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges: In substitution of 'template<class _Lhs, class _Rhs>  requires (__is_range_adaptor_closure<_Lhs>) && (__is_range_adaptor_closure<_Rhs>) constexpr auto std::ranges::views::__adaptor::operator|(_Lhs&&, _Rhs&&) [with _Lhs = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >; _Rhs = std::ranges::views::__adaptor::_Partial<std::ranges::views::_Transform, std::ranges::to<std::map<int, int>, reverse_view<ref_view<std::vector<int> > > >(reverse_view<ref_view<std::vector<int> > >&&)::<lambda(_Elt&&)> >]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:9357:43:   required from 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]'
 9357 |           return ranges::to<_Cont>(ref_view(__r) | views::transform(
      |                                    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
 9358 |                 []<typename _Elt>(_Elt&& __elem) {
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9359 |                   using _ValT = range_value_t<_Cont>;
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9360 |                   return ranges::to<_ValT>(std::forward<_Elt>(__elem));
      |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 9361 |                 }), std::forward<_Args>(__args)...);
      |                 ~~                                
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:945:13:   required for the satisfaction of '__is_range_adaptor_closure<_Lhs>' [with _Lhs = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int, std::allocator<int> > > > >]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:946:9:   in requirements with '_Tp __t' [with _Tp = std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int, std::allocator<int> > > > >]
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:946:70: note: the required expression 'std::ranges::views::__adaptor::__is_range_adaptor_closure_fn(__t, __t)' is invalid
  946 |       = requires (_Tp __t) { __adaptor::__is_range_adaptor_closure_fn(__t, __t); };
      |                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/memory_resource.h:38,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/map:81:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges: In instantiation of 'constexpr _Cont std::ranges::to(_Rg&&, _Args&& ...) [with _Cont = std::map<int, int>; _Rg = reverse_view<ref_view<std::vector<int> > >; _Args = {}]':
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   recursively required by substitution of 'template<class _Self, class _Range>  requires  __adaptor_invocable<_Adaptor, _Range, decltype((forward_like<_Self>)((declval<_Args>)()))...> constexpr auto std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >::operator()(this _Self&&, _Range&&) [with _Self = std::ranges::__detail::_To<std::map<int, int> >; _Range = {}]'
  915 |       = requires { std::declval<_Adaptor>()(declval<_Args>()...); };
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/ranges:915:44:   required by substitution of 'template<class _Self, class _Range>  requires (__is_range_adaptor_closure<_Self>) && (__adaptor_invocable<_Self, _Range>) constexpr auto std::ranges::views::__adaptor::operator|(_Range&&, _Self&&) [with _Self = std::ranges::views::__adaptor::_Partial<std::ranges::__detail::_To<std::map<int, int> > >; _Range = std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > >]'
test.cpp:24:44:   required from here
   24 |       | std::ranges::to<std::map<int,int>>();
      |                                            ^
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/cstddef:136:3: note: candidate: 'constexpr std::byte std::operator|(byte, byte)'
  136 |   operator|(byte __l, byte __r) noexcept
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/cstddef:136:18: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::byte'
  136 |   operator|(byte __l, byte __r) noexcept
      |             ~~~~~^~~
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/basic_string.h:51,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/string:54,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/locale_classes.h:40:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/charconv:627:3: note: candidate: 'constexpr std::chars_format std::operator|(chars_format, chars_format)'
  627 |   operator|(chars_format __lhs, chars_format __rhs) noexcept
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/charconv:627:26: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::chars_format'
  627 |   operator|(chars_format __lhs, chars_format __rhs) noexcept
      |             ~~~~~~~~~~~~~^~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:89:3: note: candidate: 'constexpr std::_Ios_Fmtflags std::operator|(_Ios_Fmtflags, _Ios_Fmtflags)'
   89 |   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:89:27: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::_Ios_Fmtflags'
   89 |   operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW
      |             ~~~~~~~~~~~~~~^~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:139:3: note: candidate: 'constexpr std::_Ios_Openmode std::operator|(_Ios_Openmode, _Ios_Openmode)'
  139 |   operator|(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:139:27: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::_Ios_Openmode'
  139 |   operator|(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW
      |             ~~~~~~~~~~~~~~^~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:186:3: note: candidate: 'constexpr std::_Ios_Iostate std::operator|(_Ios_Iostate, _Ios_Iostate)'
  186 |   operator|(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/ios_base.h:186:26: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::_Ios_Iostate'
  186 |   operator|(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW
      |             ~~~~~~~~~~~~~^~~
In file included from /opt/homebrew/include/boost/asio/detail/future.hpp:19,
                 from /opt/homebrew/include/boost/asio/packaged_task.hpp:19,
                 from /opt/homebrew/include/boost/asio.hpp:149,
                 from generic/basic/interface.hpp:95:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/future:163:20: note: candidate: 'constexpr std::launch std::operator|(launch, launch)'
  163 |   constexpr launch operator|(launch __x, launch __y) noexcept
      |                    ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/future:163:37: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::launch'
  163 |   constexpr launch operator|(launch __x, launch __y) noexcept
      |                              ~~~~~~~^~~
In file included from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/atomic:50,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/stop_token:39,
                 from /opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/thread:42,
                 from generic/basic/interface.hpp:41:
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/atomic_base.h:103:3: note: candidate: 'constexpr std::memory_order std::operator|(memory_order, __memory_order_modifier)'
  103 |   operator|(memory_order __m, __memory_order_modifier __mod) noexcept
      |   ^~~~~~~~
/opt/homebrew/Cellar/gcc/14.2.0_1/include/c++/14/bits/atomic_base.h:103:26: note:   no known conversion for argument 1 from 'std::ranges::ref_view<std::ranges::reverse_view<std::ranges::ref_view<std::vector<int> > > >' to 'std::memory_order'
  103 |   operator|(memory_order __m, __memory_order_modifier __mod) noexcept
      |             ~~~~~~~~~~~~~^~~
