In file included from main.cpp:1:
In file included from ./generic/basic/interface.hpp:313:
In file included from ./generic/basic/common/common.hpp:3:
./generic/basic/common/concept.hpp:146:111: error: satisfaction of constraint 'requires (type obj) { std::cin >> obj; }' depends on itself
  146 | template < class type >                                   concept        inputable                          = requires ( type obj ) { std::cin  >> obj; };
      |                                                                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./generic/basic/common/concept.hpp:146:111: note: while substituting template arguments into constraint expression here
  146 | template < class type >                                   concept        inputable                          = requires ( type obj ) { std::cin  >> obj; };
      |                                                                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:42:20: note: while checking the satisfaction of concept 'inputable<ap::basic_string_view<char>>' requested here
   42 |         template < inputable   type2 > constexpr explicit operator type2                      ( ) const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^
./specific/container/string/string_class/string_view.hpp:42:20: note: while substituting template arguments into constraint expression here
   42 |         template < inputable   type2 > constexpr explicit operator type2                      ( ) const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^~~~~~~~~
./specific/container/string/string_base/string_global.ipp:6:22: note: while checking constraint satisfaction for template 'operator type-parameter-0-0<char, ap::cpu>' required here
    6 |     requires same_as<right_value_type,char> and
      |                      ^~~~~~~~~~~~~~~~
./specific/container/string/string_base/string_global.hpp:6:45: note: expanded from macro 'right_value_type'
    6 | #define right_value_type  typename decltype(basic_string_view(right))::value_type
      |                                             ^~~~~~~~~~~~~~~~~
./specific/container/string/string_base/string_global.ipp:6:22: note: in instantiation of function template specialization 'ap::basic_string_view<char>::operator basic_string_view<ap::basic_string_view<char>>' requested here
./specific/container/string/string_base/string_global.hpp:6:45: note: expanded from macro 'right_value_type'
    6 | #define right_value_type  typename decltype(basic_string_view(right))::value_type
      |                                             ^
./specific/container/string/string_base/string_global.ipp:6:14: note: (skipping 5 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    6 |     requires same_as<right_value_type,char> and
      |              ^
./specific/container/string/string_class/string.hpp:52:20: note: while checking the satisfaction of concept 'inputable<ap::basic_string_view<char>>' requested here
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^
./specific/container/string/string_class/string.hpp:52:20: note: while substituting template arguments into constraint expression here
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^~~~~~~~~
./specific/container/string/string_base/string_global.ipp:81:20: note: while checking constraint satisfaction for template 'operator type-parameter-0-0<char, ap::cpu>' required here
   81 |     using device = left_device_type;
      |                    ^~~~~~~~~~~~~~~~
./specific/container/string/string_base/string_global.hpp:7:63: note: expanded from macro 'left_device_type'
    7 | #define left_device_type  typename decltype(basic_string_view(left ))::device_type
      |                                                               ^~~~
./specific/container/string/string_base/string_global.ipp:81:20: note: in instantiation of function template specialization 'ap::basic_string<char>::operator basic_string_view<ap::basic_string_view<char>>' requested here
./specific/container/string/string_base/string_global.hpp:7:63: note: expanded from macro 'left_device_type'
    7 | #define left_device_type  typename decltype(basic_string_view(left ))::device_type
      |                                                               ^
main.cpp:17:15: note: in instantiation of function template specialization 'ap::operator*<ap::basic_string<char>, int>' requested here
   17 |     print(str * 3);
      |               ^
In file included from main.cpp:6:
In file included from ./specific/container/interface.hpp:228:
In file included from ./specific/container/string/string.hpp:3:
In file included from ./specific/container/string/string_base/string_global.hpp:23:
./specific/container/string/string_base/string_global.ipp:81:20: error: no matching conversion for functional-style cast from 'const ap::basic_string<char>' to 'basic_string_view<char, cpu>' (aka 'basic_string_view<char, ap::cpu>')
   81 |     using device = left_device_type;
      |                    ^~~~~~~~~~~~~~~~
./specific/container/string/string_base/string_global.hpp:7:45: note: expanded from macro 'left_device_type'
    7 | #define left_device_type  typename decltype(basic_string_view(left ))::device_type
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
main.cpp:17:15: note: in instantiation of function template specialization 'ap::operator*<ap::basic_string<char>, int>' requested here
   17 |     print(str * 3);
      |               ^
./specific/container/string/string_class/string.hpp:42:19: note: candidate function
   42 |         constexpr operator       string_view ( ) const;
      |                   ^
./specific/container/string/string_class/string_view.hpp:36:19: note: candidate constructor
   36 |         constexpr basic_string_view ( const string& );
      |                   ^
./specific/container/string/string_class/string_view.hpp:29:19: note: candidate constructor has been explicitly deleted
   29 |         constexpr basic_string_view ( const basic_string_view& )             = delete;
      |                   ^
./specific/container/string/string_class/string_view.hpp:33:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char' for 1st argument
   33 |         constexpr basic_string_view ( const type& );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:34:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char *' for 1st argument
   34 |         constexpr basic_string_view ( const type* );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:28:19: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
   28 |         constexpr basic_string_view ( )                                      = delete;
      |                   ^
./specific/container/string/string_class/string.hpp:46:59: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   46 |         template < char_type   type2 > constexpr explicit operator             basic_string<type2,device> ( ) const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:20: note: because 'ap::basic_string_view<char>' does not satisfy 'number_type'
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                    ^
./generic/basic/common/concept.hpp:159:111: note: because 'ap::basic_string_view<char>' does not satisfy 'int_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                               ^
./generic/basic/common/concept.hpp:156:113: note: because 'ap::basic_string_view<char>' does not satisfy 'signed_integral'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                 ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:33:27: note: because 'ap::basic_string_view<char>' does not satisfy 'integral'
   33 | concept signed_integral = integral<_Tp> && is_signed_v<_Tp>;
      |                           ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:30:20: note: because 'is_integral_v<ap::basic_string_view<char> >' evaluated to false
   30 | concept integral = is_integral_v<_Tp>;
      |                    ^
./generic/basic/common/concept.hpp:156:201: note: and 'typename type::int_tag' would be invalid: no type named 'int_tag' in 'ap::basic_string_view<char>'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:129: note: and 'ap::basic_string_view<char>' does not satisfy 'float_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                 ^
./generic/basic/common/concept.hpp:158:111: note: because 'ap::basic_string_view<char>' does not satisfy 'floating_point'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                               ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:39:26: note: because 'is_floating_point_v<ap::basic_string_view<char> >' evaluated to false
   39 | concept floating_point = is_floating_point_v<_Tp>;
      |                          ^
./generic/basic/common/concept.hpp:158:201: note: and 'typename type::float_tag' would be invalid: no type named 'float_tag' in 'ap::basic_string_view<char>'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:201: note: and 'typename type::number_tag' would be invalid: no type named 'number_tag' in 'ap::basic_string_view<char>'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                                                                                         ^
./specific/container/string/string_class/string.hpp:52:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                                                           ^
./specific/container/string/string_class/string.hpp:52:20: note: because substituted constraint expression is ill-formed: constraint depends on a previously diagnosed expression
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^
./specific/container/string/string_class/string.hpp:57:55: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   57 |         template < class device2 > constexpr explicit operator             basic_string<type,device2> ( ) const requires same_as<device,cpu>;
      |                                                       ^
./specific/container/string/string_class/string_view.hpp:35:19: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
   35 |         constexpr basic_string_view ( const type*, int );
      |                   ^                   ~~~~~~~~~~~~~~~~
In file included from main.cpp:6:
In file included from ./specific/container/interface.hpp:228:
In file included from ./specific/container/string/string.hpp:3:
In file included from ./specific/container/string/string_base/string_global.hpp:23:
./specific/container/string/string_base/string_global.ipp:82:21: error: no matching conversion for functional-style cast from 'const ap::basic_string<char>' to 'basic_string_view<char, cpu>' (aka 'basic_string_view<char, ap::cpu>')
   82 |     let left_view = basic_string_view(left);
      |                     ^~~~~~~~~~~~~~~~~~~~~~~
./specific/container/string/string_class/string.hpp:42:19: note: candidate function
   42 |         constexpr operator       string_view ( ) const;
      |                   ^
./specific/container/string/string_class/string_view.hpp:36:19: note: candidate constructor
   36 |         constexpr basic_string_view ( const string& );
      |                   ^
./specific/container/string/string_class/string_view.hpp:29:19: note: candidate constructor has been explicitly deleted
   29 |         constexpr basic_string_view ( const basic_string_view& )             = delete;
      |                   ^
./specific/container/string/string_class/string_view.hpp:33:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char' for 1st argument
   33 |         constexpr basic_string_view ( const type& );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:34:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char *' for 1st argument
   34 |         constexpr basic_string_view ( const type* );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:28:19: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
   28 |         constexpr basic_string_view ( )                                      = delete;
      |                   ^
./specific/container/string/string_class/string.hpp:46:59: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   46 |         template < char_type   type2 > constexpr explicit operator             basic_string<type2,device> ( ) const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:20: note: because 'ap::basic_string_view<char>' does not satisfy 'number_type'
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                    ^
./generic/basic/common/concept.hpp:159:111: note: because 'ap::basic_string_view<char>' does not satisfy 'int_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                               ^
./generic/basic/common/concept.hpp:156:113: note: because 'ap::basic_string_view<char>' does not satisfy 'signed_integral'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                 ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:33:27: note: because 'ap::basic_string_view<char>' does not satisfy 'integral'
   33 | concept signed_integral = integral<_Tp> && is_signed_v<_Tp>;
      |                           ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:30:20: note: because 'is_integral_v<ap::basic_string_view<char> >' evaluated to false
   30 | concept integral = is_integral_v<_Tp>;
      |                    ^
./generic/basic/common/concept.hpp:156:201: note: and 'typename type::int_tag' would be invalid: no type named 'int_tag' in 'ap::basic_string_view<char>'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:129: note: and 'ap::basic_string_view<char>' does not satisfy 'float_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                 ^
./generic/basic/common/concept.hpp:158:111: note: because 'ap::basic_string_view<char>' does not satisfy 'floating_point'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                               ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:39:26: note: because 'is_floating_point_v<ap::basic_string_view<char> >' evaluated to false
   39 | concept floating_point = is_floating_point_v<_Tp>;
      |                          ^
./generic/basic/common/concept.hpp:158:201: note: and 'typename type::float_tag' would be invalid: no type named 'float_tag' in 'ap::basic_string_view<char>'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:201: note: and 'typename type::number_tag' would be invalid: no type named 'number_tag' in 'ap::basic_string_view<char>'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                                                                                         ^
./specific/container/string/string_class/string.hpp:52:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                                                           ^
./specific/container/string/string_class/string.hpp:52:20: note: because substituted constraint expression is ill-formed: constraint depends on a previously diagnosed expression
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^
./specific/container/string/string_class/string.hpp:57:55: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   57 |         template < class device2 > constexpr explicit operator             basic_string<type,device2> ( ) const requires same_as<device,cpu>;
      |                                                       ^
./specific/container/string/string_class/string_view.hpp:35:19: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
   35 |         constexpr basic_string_view ( const type*, int );
      |                   ^                   ~~~~~~~~~~~~~~~~
In file included from main.cpp:6:
In file included from ./specific/container/interface.hpp:228:
In file included from ./specific/container/string/string.hpp:3:
In file included from ./specific/container/string/string_base/string_global.hpp:23:
./specific/container/string/string_base/string_global.ipp:83:34: error: no matching conversion for functional-style cast from 'const ap::basic_string<char>' to 'basic_string_view<char, cpu>' (aka 'basic_string_view<char, ap::cpu>')
   83 |     let str       = basic_string<left_value_type,left_device_type>(left.size() * right, left_value_type('\0'));
      |                                  ^~~~~~~~~~~~~~~
./specific/container/string/string_base/string_global.hpp:5:45: note: expanded from macro 'left_value_type'
    5 | #define left_value_type   typename decltype(basic_string_view(left ))::value_type
      |                                             ^~~~~~~~~~~~~~~~~~~~~~~~
./specific/container/string/string_class/string.hpp:42:19: note: candidate function
   42 |         constexpr operator       string_view ( ) const;
      |                   ^
./specific/container/string/string_class/string_view.hpp:36:19: note: candidate constructor
   36 |         constexpr basic_string_view ( const string& );
      |                   ^
./specific/container/string/string_class/string_view.hpp:29:19: note: candidate constructor has been explicitly deleted
   29 |         constexpr basic_string_view ( const basic_string_view& )             = delete;
      |                   ^
./specific/container/string/string_class/string_view.hpp:33:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char' for 1st argument
   33 |         constexpr basic_string_view ( const type& );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:34:19: note: candidate constructor not viable: no known conversion from 'const ap::basic_string<char>' to 'const char *' for 1st argument
   34 |         constexpr basic_string_view ( const type* );
      |                   ^                   ~~~~~~~~~~~
./specific/container/string/string_class/string_view.hpp:28:19: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
   28 |         constexpr basic_string_view ( )                                      = delete;
      |                   ^
./specific/container/string/string_class/string.hpp:46:59: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   46 |         template < char_type   type2 > constexpr explicit operator             basic_string<type2,device> ( ) const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                                                           ^
./specific/container/string/string_class/string.hpp:50:20: note: because 'ap::basic_string_view<char>' does not satisfy 'number_type'
   50 |         template < number_type type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char>;
      |                    ^
./generic/basic/common/concept.hpp:159:111: note: because 'ap::basic_string_view<char>' does not satisfy 'int_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                               ^
./generic/basic/common/concept.hpp:156:113: note: because 'ap::basic_string_view<char>' does not satisfy 'signed_integral'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                 ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:33:27: note: because 'ap::basic_string_view<char>' does not satisfy 'integral'
   33 | concept signed_integral = integral<_Tp> && is_signed_v<_Tp>;
      |                           ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:30:20: note: because 'is_integral_v<ap::basic_string_view<char> >' evaluated to false
   30 | concept integral = is_integral_v<_Tp>;
      |                    ^
./generic/basic/common/concept.hpp:156:201: note: and 'typename type::int_tag' would be invalid: no type named 'int_tag' in 'ap::basic_string_view<char>'
  156 | template < class type >                                   concept        int_type                           = ( std::signed_integral  <type> and ( not char_type<type> ) ) or requires { typename type::int_tag;          };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:129: note: and 'ap::basic_string_view<char>' does not satisfy 'float_type'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                 ^
./generic/basic/common/concept.hpp:158:111: note: because 'ap::basic_string_view<char>' does not satisfy 'floating_point'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                               ^
/opt/homebrew/Cellar/llvm/19.1.7/bin/../include/c++/v1/__concepts/arithmetic.h:39:26: note: because 'is_floating_point_v<ap::basic_string_view<char> >' evaluated to false
   39 | concept floating_point = is_floating_point_v<_Tp>;
      |                          ^
./generic/basic/common/concept.hpp:158:201: note: and 'typename type::float_tag' would be invalid: no type named 'float_tag' in 'ap::basic_string_view<char>'
  158 | template < class type >                                   concept        float_type                         = std::floating_point<type>                                    or requires { typename type::float_tag;        };
      |                                                                                                                                                                                                         ^
./generic/basic/common/concept.hpp:159:201: note: and 'typename type::number_tag' would be invalid: no type named 'number_tag' in 'ap::basic_string_view<char>'
  159 | template < class type >                                   concept        number_type                        = int_type<type> or float_type<type>                           or requires { typename type::number_tag;       };
      |                                                                                                                                                                                                         ^
./specific/container/string/string_class/string.hpp:52:59: note: candidate template ignored: constraints not satisfied [with type2 = ap::basic_string_view<char>]
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                                                           ^
./specific/container/string/string_class/string.hpp:52:20: note: because substituted constraint expression is ill-formed: constraint depends on a previously diagnosed expression
   52 |         template < inputable   type2 > constexpr explicit operator             type2 ( )                      const requires same_as<type,char> and ( not number_type<type2> ) and ( not string_type<type2> );
      |                    ^
./specific/container/string/string_class/string.hpp:57:55: note: candidate template ignored: could not match 'ap::basic_string' against 'ap::basic_string_view'
   57 |         template < class device2 > constexpr explicit operator             basic_string<type,device2> ( ) const requires same_as<device,cpu>;
      |                                                       ^
./specific/container/string/string_class/string_view.hpp:35:19: note: candidate constructor not viable: requires 2 arguments, but 1 was provided
   35 |         constexpr basic_string_view ( const type*, int );
      |                   ^                   ~~~~~~~~~~~~~~~~
4 errors generated.
